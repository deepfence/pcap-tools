# @TEST-EXEC: zeek -C -r $TRACES/tls/chrome-34-google.trace %INPUT
# @TEST-EXEC: zeek -C -r $TRACES/tls/tls-13draft19-early-data.pcap %INPUT
# @TEST-EXEC: zeek -C -r $TRACES/tls/tls13_psk_succesfull.pcap %INPUT
# @TEST-EXEC: btest-diff .stdout

event ssl_extension_elliptic_curves(c: connection, is_orig: bool, curves: index_vec)
	{
	print "Curves", c$id$orig_h, c$id$resp_h;
	for ( i in curves )
		print SSL::ec_curves[curves[i]];
	}

event ssl_extension_ec_point_formats(c: connection, is_orig: bool, point_formats: index_vec)
	{
	print "Point formats", c$id$orig_h, c$id$resp_h, is_orig;
	for ( i in point_formats )
		print SSL::ec_point_formats[point_formats[i]];
	}

event ssl_extension_application_layer_protocol_negotiation(c: connection, is_orig: bool, protocols: string_vec)
	{
	print "ALPN", c$id$orig_h, c$id$resp_h, protocols;
	}

event ssl_extension_server_name(c: connection, is_orig: bool, names: string_vec)
	{
	print "server_name", c$id$orig_h, c$id$resp_h, names;
	}

event ssl_extension_signature_algorithm(c: connection, is_orig: bool, signature_algorithms: vector of SSL::SignatureAndHashAlgorithm)
	{
	print "signature_algorithm", c$id$orig_h, c$id$resp_h;
	for ( i in signature_algorithms)
		{
		print SSL::hash_algorithms[signature_algorithms[i]$HashAlgorithm], SSL::signature_algorithms[signature_algorithms[i]$SignatureAlgorithm];
		}
	}

event ssl_extension_supported_versions(c: connection, is_orig: bool, versions: index_vec)
	{
	print "supported_versions", c$id$orig_h, c$id$resp_h;
	for ( i in versions )
		print SSL::version_strings[versions[i]];
	}

event ssl_extension_psk_key_exchange_modes(c: connection, is_orig: bool, modes: index_vec)
	{
	print "psk_key_exchange_modes", c$id$orig_h, c$id$resp_h;
	for ( i in modes )
		print modes[i];
	}

event ssl_extension_pre_shared_key_client_hello(c: connection, is_orig: bool, identities: psk_identity_vec, binders: string_vec)
	{
	print "pre_shared_key client hello", c$id$orig_h, c$id$resp_h, identities, binders;
	}

event ssl_extension_pre_shared_key_server_hello(c: connection, is_orig: bool, selected_identity: count)
	{
	print "pre_shared_key server hello", c$id$orig_h, c$id$resp_h, selected_identity;
	}
