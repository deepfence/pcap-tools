
##! Functions to interface with broker's distributed data store.

%%{
#include "broker/Manager.h"
#include "broker/Store.h"
#include "broker/Data.h"
#include "Trigger.h"

static broker::optional<broker::timespan> prepare_expiry(double e)
	{
	broker::optional<broker::timespan> ts;

	if ( e )
		{
		broker::timespan x;
		broker::convert(e, x);
		ts = x;
		}

	return ts;
	}
%%}

module Broker;

type Broker::QueryResult: record;

type Broker::BackendOptions: record;

enum BackendType %{
	MEMORY,
	SQLITE,
	ROCKSDB,
%}

function Broker::__create_master%(id: string, b: BackendType,
                                  options: BackendOptions &default = BackendOptions()%): opaque of Broker::Store
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto name = id->CheckString();
	auto rval = broker_mgr->LookupStore(name);

	if ( rval )
		return IntrusivePtr<Val>{NewRef{}, rval};

	auto e = static_cast<BifEnum::Broker::BackendType>(b->AsEnum());
	auto type = bro_broker::to_backend_type(e);
	auto opts = bro_broker::to_backend_options(type, options->AsRecordVal());

	IntrusivePtr<Val> store{AdoptRef{}, broker_mgr->MakeMaster(name, type, std::move(opts))};

	if ( ! store )
		{
		builtin_error(fmt("Could not create Broker master store '%s'", name));
		return nullptr;
		}

	return store;
	%}

function Broker::__create_clone%(id: string, resync_interval: interval,
                                 stale_interval: interval,
                                 mutation_buffer_interval: interval%): opaque of Broker::Store
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto name = id->CheckString();
	auto rval = broker_mgr->LookupStore(name);

	if ( rval )
		return IntrusivePtr<Val>{NewRef{}, rval};

	IntrusivePtr<Val> store {AdoptRef{},
	                         broker_mgr->MakeClone(name, resync_interval,
	                                               stale_interval,
	                                               mutation_buffer_interval)};

	if ( ! store )
		{
		builtin_error(fmt("Could not create clone of Broker store '%s'", name));
		return nullptr;
		}

	return store;
	%}

function Broker::__is_closed%(h: opaque of Broker::Store%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;

	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	return val_mgr->Bool(broker_mgr->LookupStore(handle->store.name()));
	%}

function Broker::__close%(h: opaque of Broker::Store%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;

	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	return val_mgr->Bool(broker_mgr->CloseStore(handle->store.name()));
	%}

function Broker::__store_name%(h: opaque of Broker::Store%): string
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->EmptyString();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	return make_intrusive<StringVal>(handle->store.name());
	%}

function Broker::__exists%(h: opaque of Broker::Store,
                           k: any%): Broker::QueryResult
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return bro_broker::query_result();
		}

	auto trigger = frame->GetTrigger();

	if ( ! trigger )
		{
		builtin_error("Broker queries can only be called inside when-condition");
		return bro_broker::query_result();
		}

	auto timeout = trigger->TimeoutValue();

	if ( timeout < 0 )
		{
		builtin_error("Broker queries must specify a timeout block");
		return bro_broker::query_result();
		}

	frame->SetDelayed();
	trigger->Hold();

	auto cb = new bro_broker::StoreQueryCallback(trigger, frame->GetCall(),
	                                             handle->store);
	auto req_id = handle->proxy.exists(std::move(*key));
	broker_mgr->TrackStoreQuery(handle, req_id, cb);

	return nullptr;
	%}

function Broker::__get%(h: opaque of Broker::Store,
                        k: any%): Broker::QueryResult
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return bro_broker::query_result();
		}

	auto trigger = frame->GetTrigger();

	if ( ! trigger )
		{
		builtin_error("Broker queries can only be called inside when-condition");
		return bro_broker::query_result();
		}

	auto timeout = trigger->TimeoutValue();

	if ( timeout < 0 )
		{
		builtin_error("Broker queries must specify a timeout block");
		return bro_broker::query_result();
		}

	frame->SetDelayed();
	trigger->Hold();

	auto cb = new bro_broker::StoreQueryCallback(trigger, frame->GetCall(),
	                                             handle->store);
	auto req_id = handle->proxy.get(std::move(*key));
	broker_mgr->TrackStoreQuery(handle, req_id, cb);

	return nullptr;
	%}

function Broker::__put_unique%(h: opaque of Broker::Store,
                               k: any, v: any, e: interval%): Broker::QueryResult
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto val = bro_broker::val_to_data(v);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return bro_broker::query_result();
		}

	if ( ! val )
		{
		builtin_error("invalid Broker data conversion for value argument");
		return bro_broker::query_result();
		}

	auto trigger = frame->GetTrigger();

	if ( ! trigger )
		{
		builtin_error("Broker queries can only be called inside when-condition");
		return bro_broker::query_result();
		}

	auto timeout = trigger->TimeoutValue();

	if ( timeout < 0 )
		{
		builtin_error("Broker queries must specify a timeout block");
		return bro_broker::query_result();
		}

	frame->SetDelayed();
	trigger->Hold();

	auto cb = new bro_broker::StoreQueryCallback(trigger, frame->GetCall(),
	                                             handle->store);

	auto req_id = handle->proxy.put_unique(std::move(*key), std::move(*val),
	                                       prepare_expiry(e));
	broker_mgr->TrackStoreQuery(handle, req_id, cb);

	return nullptr;
	%}

function Broker::__get_index_from_value%(h: opaque of Broker::Store,
                                         k: any, i: any%): Broker::QueryResult
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return bro_broker::query_result();
		}

	auto index = bro_broker::val_to_data(i);

	if ( ! index )
		{
		builtin_error("invalid Broker data conversion for index argument");
		return bro_broker::query_result();
		}
	
	auto trigger = frame->GetTrigger();

	if ( ! trigger )
		{
		builtin_error("Broker queries can only be called inside when-condition");
		return bro_broker::query_result();
		}

	auto timeout = trigger->TimeoutValue();

	if ( timeout < 0 )
		{
		builtin_error("Broker queries must specify a timeout block");
		return bro_broker::query_result();
		}

	frame->SetDelayed();
	trigger->Hold();

	auto cb = new bro_broker::StoreQueryCallback(trigger, frame->GetCall(),
						     handle->store);
	auto req_id = handle->proxy.get_index_from_value(std::move(*key),
	                                                 std::move(*index));
	broker_mgr->TrackStoreQuery(handle, req_id, cb);

	return nullptr;
	%}

function Broker::__keys%(h: opaque of Broker::Store%): Broker::QueryResult
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);

	auto trigger = frame->GetTrigger();

	if ( ! trigger )
		{
		builtin_error("Broker queries can only be called inside when-condition");
		return bro_broker::query_result();
		}

	auto timeout = trigger->TimeoutValue();

	if ( timeout < 0 )
		{
		builtin_error("Broker queries must specify a timeout block");
		return bro_broker::query_result();
		}

	frame->SetDelayed();
	trigger->Hold();

	auto cb = new bro_broker::StoreQueryCallback(trigger, frame->GetCall(),
	                                             handle->store);
	auto req_id = handle->proxy.keys();
	broker_mgr->TrackStoreQuery(handle, req_id, cb);

	return nullptr;
	%}

function Broker::__put%(h: opaque of Broker::Store,
                        k: any, v: any, e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto val = bro_broker::val_to_data(v);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! val )
		{
		builtin_error("invalid Broker data conversion for value argument");
		return val_mgr->False();
		}

	handle->store.put(std::move(*key), std::move(*val), prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__erase%(h: opaque of Broker::Store, k: any%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	handle->store.erase(std::move(*key));
	return val_mgr->True();
	%}

function Broker::__increment%(h: opaque of Broker::Store, k: any, a: any,
                              e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto amount = bro_broker::val_to_data(a);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! amount )
		{
		builtin_error("invalid Broker data conversion for amount argument");
		return val_mgr->False();
		}

	handle->store.increment(std::move(*key), std::move(*amount),
	                        prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__decrement%(h: opaque of Broker::Store, k: any, a: any,
                              e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto amount = bro_broker::val_to_data(a);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! amount )
		{
		builtin_error("invalid Broker data conversion for amount argument");
		return val_mgr->False();
		}

	handle->store.decrement(std::move(*key), std::move(*amount), prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__append%(h: opaque of Broker::Store, k: any, s: any,
                           e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto str = bro_broker::val_to_data(s);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! str )
		{
		builtin_error("invalid Broker data conversion for str argument");
		return val_mgr->False();
		}

	handle->store.append(std::move(*key), std::move(*str), prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__insert_into_set%(h: opaque of Broker::Store, k: any, i: any,
                                    e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto idx = bro_broker::val_to_data(i);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! idx )
		{
		builtin_error("invalid Broker data conversion for index argument");
		return val_mgr->False();
		}

	handle->store.insert_into(std::move(*key), std::move(*idx),
	                          prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__insert_into_table%(h: opaque of Broker::Store, k: any,
                                      i: any, v: any, e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto idx = bro_broker::val_to_data(i);
	auto val = bro_broker::val_to_data(v);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! idx )
		{
		builtin_error("invalid Broker data conversion for index argument");
		return val_mgr->False();
		}

	if ( ! val )
		{
		builtin_error("invalid Broker data conversion for value argument");
		return val_mgr->False();
		}

	handle->store.insert_into(std::move(*key), std::move(*idx),
	                          std::move(*val), prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__remove_from%(h: opaque of Broker::Store, k: any, i: any,
                                e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto idx = bro_broker::val_to_data(i);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! idx )
		{
		builtin_error("invalid Broker data conversion for index argument");
		return val_mgr->False();
		}

	handle->store.remove_from(std::move(*key), std::move(*idx),
	                          prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__push%(h: opaque of Broker::Store, k: any, v: any,
                         e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);
	auto val = bro_broker::val_to_data(v);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	if ( ! val )
		{
		builtin_error("invalid Broker data conversion for value argument");
		return val_mgr->False();
		}

	handle->store.push(std::move(*key), std::move(*val), prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__pop%(h: opaque of Broker::Store, k: any, e: interval%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	auto key = bro_broker::val_to_data(k);

	if ( ! key )
		{
		builtin_error("invalid Broker data conversion for key argument");
		return val_mgr->False();
		}

	handle->store.pop(std::move(*key), prepare_expiry(e));
	return val_mgr->True();
	%}

function Broker::__clear%(h: opaque of Broker::Store%): bool
	%{
	if ( ! h )
		{
		builtin_error("invalid Broker store handle");
		return val_mgr->False();
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);

	handle->store.clear();
	return val_mgr->True();
	%}
