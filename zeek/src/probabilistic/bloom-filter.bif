##! Functions to create and manipulate Bloom filters.

%%{

// TODO: This is currently included from the top-level src directory, hence
// paths are relative to there. We need a better mechanisms to pull in
// BiFs defined in sub directories.
#include "probabilistic/BloomFilter.h"
#include "OpaqueVal.h"

using namespace probabilistic;

%%}

module GLOBAL;

## Creates a basic Bloom filter.
##
## fp: The desired false-positive rate.
##
## capacity: the maximum number of elements that guarantees a false-positive
##           rate of *fp*.
##
## name: A name that uniquely identifies and seeds the Bloom filter. If empty,
##       the filter will use :zeek:id:`global_hash_seed` if that's set, and
##       otherwise use a local seed tied to the current Zeek process. Only
##       filters with the same seed can be merged with
##       :zeek:id:`bloomfilter_merge`.
##
## Returns: A Bloom filter handle.
##
## .. zeek:see:: bloomfilter_basic_init2 bloomfilter_counting_init bloomfilter_add
##    bloomfilter_lookup bloomfilter_clear bloomfilter_merge global_hash_seed
function bloomfilter_basic_init%(fp: double, capacity: count,
                                 name: string &default=""%): opaque of bloomfilter
	%{
	if ( fp < 0.0 || fp > 1.0 )
		{
		reporter->Error("false-positive rate must take value between 0 and 1");
		return nullptr;
		}

	size_t cells = BasicBloomFilter::M(fp, capacity);
	size_t optimal_k = BasicBloomFilter::K(cells, capacity);
	Hasher::seed_t seed = Hasher::MakeSeed(name->Len() > 0 ? name->Bytes() : 0,
                                 name->Len());
	const Hasher* h = new DoubleHasher(optimal_k, seed);

	return make_intrusive<BloomFilterVal>(new BasicBloomFilter(h, cells));
	%}

## Creates a basic Bloom filter. This function serves as a low-level
## alternative to :zeek:id:`bloomfilter_basic_init` where the user has full
## control over the number of hash functions and cells in the underlying bit
## vector.
##
## k: The number of hash functions to use.
##
## cells: The number of cells of the underlying bit vector.
##
## name: A name that uniquely identifies and seeds the Bloom filter. If empty,
##       the filter will use :zeek:id:`global_hash_seed` if that's set, and
##       otherwise use a local seed tied to the current Zeek process. Only
##       filters with the same seed can be merged with
##       :zeek:id:`bloomfilter_merge`.
##
## Returns: A Bloom filter handle.
##
## .. zeek:see:: bloomfilter_basic_init bloomfilter_counting_init  bloomfilter_add
##    bloomfilter_lookup bloomfilter_clear bloomfilter_merge global_hash_seed
function bloomfilter_basic_init2%(k: count, cells: count,
                                  name: string &default=""%): opaque of bloomfilter
	%{
	if ( k == 0 )
		{
		reporter->Error("number of hash functions must be non-negative");
		return nullptr;
		}
	if ( cells == 0 )
		{
		reporter->Error("number of cells must be non-negative");
		return nullptr;
		}

	Hasher::seed_t seed = Hasher::MakeSeed(name->Len() > 0 ? name->Bytes() : 0,
				       name->Len());
	const Hasher* h = new DoubleHasher(k, seed);

	return make_intrusive<BloomFilterVal>(new BasicBloomFilter(h, cells));
	%}

## Creates a counting Bloom filter.
##
## k: The number of hash functions to use.
##
## cells: The number of cells of the underlying counter vector. As there's
##        no single answer to what's the best parameterization for a
##        counting Bloom filter, we refer to the Bloom filter literature
##        here for choosing an appropiate value.
##
## max: The maximum counter value associated with each element
##      described by *w = ceil(log_2(max))* bits. Each bit in the underlying
##      counter vector becomes a cell of size *w* bits.
##
## name: A name that uniquely identifies and seeds the Bloom filter. If empty,
##       the filter will use :zeek:id:`global_hash_seed` if that's set, and
##       otherwise use a local seed tied to the current Zeek process. Only
##       filters with the same seed can be merged with
##       :zeek:id:`bloomfilter_merge`.
##
## Returns: A Bloom filter handle.
##
## .. zeek:see:: bloomfilter_basic_init bloomfilter_basic_init2 bloomfilter_add
##    bloomfilter_lookup bloomfilter_clear bloomfilter_merge global_hash_seed
function bloomfilter_counting_init%(k: count, cells: count, max: count,
				    name: string &default=""%): opaque of bloomfilter
	%{
	if ( max == 0 )
		{
		reporter->Error("max counter value must be greater than 0");
		return nullptr;
		}

	Hasher::seed_t seed = Hasher::MakeSeed(name->Len() > 0 ? name->Bytes() : 0,
				       name->Len());

	const Hasher* h = new DefaultHasher(k, seed);

	uint16_t width = 1;
	while ( max >>= 1 )
		++width;

	return make_intrusive<BloomFilterVal>(new CountingBloomFilter(h, cells, width));
	%}

## Adds an element to a Bloom filter.
##
## bf: The Bloom filter handle.
##
## x: The element to add.
##
## .. zeek:see:: bloomfilter_basic_init bloomfilter_basic_init2 
##    bloomfilter_counting_init bloomfilter_lookup bloomfilter_clear 
##    bloomfilter_merge
function bloomfilter_add%(bf: opaque of bloomfilter, x: any%): any
	%{
	BloomFilterVal* bfv = static_cast<BloomFilterVal*>(bf);

	if ( ! bfv->Type() && ! bfv->Typify(x->GetType()) )
		reporter->Error("failed to set Bloom filter type");

	else if ( ! same_type(bfv->Type(), x->GetType()) )
		reporter->Error("incompatible Bloom filter types");

	else
		bfv->Add(x);

	return nullptr;
	%}

## Retrieves the counter for a given element in a Bloom filter.
##
## bf: The Bloom filter handle.
##
## x: The element to count.
##
## Returns: the counter associated with *x* in *bf*.
##
## .. zeek:see:: bloomfilter_basic_init bloomfilter_basic_init2
##    bloomfilter_counting_init bloomfilter_add bloomfilter_clear
##    bloomfilter_merge
function bloomfilter_lookup%(bf: opaque of bloomfilter, x: any%): count
	%{
	const BloomFilterVal* bfv = static_cast<const BloomFilterVal*>(bf);

	if ( ! bfv->Type() )
		return val_mgr->Count(0);

	else if ( ! same_type(bfv->Type(), x->GetType()) )
		reporter->Error("incompatible Bloom filter types");

	else
		return val_mgr->Count(static_cast<uint64_t>(bfv->Count(x)));

	return val_mgr->Count(0);
	%}

## Removes all elements from a Bloom filter. This function resets all bits in
## the underlying bitvector back to 0 but does not change the parameterization
## of the Bloom filter, such as the element type and the hasher seed.
##
## bf: The Bloom filter handle.
##
## .. zeek:see:: bloomfilter_basic_init bloomfilter_basic_init2
##    bloomfilter_counting_init bloomfilter_add bloomfilter_lookup
##    bloomfilter_merge
function bloomfilter_clear%(bf: opaque of bloomfilter%): any
	%{
	BloomFilterVal* bfv = static_cast<BloomFilterVal*>(bf);

	if ( bfv->Type() ) // Untyped Bloom filters are already empty.
		bfv->Clear();

	return nullptr;
	%}

## Merges two Bloom filters.
##
## .. note:: Currently Bloom filters created by different Zeek instances cannot
##    be merged. In the future, this will be supported as long as both filters
##    are created with the same name.
##
## bf1: The first Bloom filter handle.
##
## bf2: The second Bloom filter handle.
##
## Returns: The union of *bf1* and *bf2*.
##
## .. zeek:see:: bloomfilter_basic_init bloomfilter_basic_init2
##    bloomfilter_counting_init bloomfilter_add bloomfilter_lookup
##    bloomfilter_clear
function bloomfilter_merge%(bf1: opaque of bloomfilter,
			    bf2: opaque of bloomfilter%): opaque of bloomfilter
	%{
	const BloomFilterVal* bfv1 = static_cast<const BloomFilterVal*>(bf1);
	const BloomFilterVal* bfv2 = static_cast<const BloomFilterVal*>(bf2);

	if ( bfv1->Type() && // any one 0 is ok here
	     bfv2->Type() &&
	     ! same_type(bfv1->Type(), bfv2->Type()) )
		{
		reporter->Error("incompatible Bloom filter types");
		return nullptr;
		}

	return BloomFilterVal::Merge(bfv1, bfv2);
	%}

## Returns a string with a representation of a Bloom filter's internal
## state. This is for debugging/testing purposes only.
## 
## bf: The Bloom filter handle.
##
## Returns: a string with a representation of a Bloom filter's internal state.
function bloomfilter_internal_state%(bf: opaque of bloomfilter%): string
	%{
	BloomFilterVal* bfv = static_cast<BloomFilterVal*>(bf);
	return make_intrusive<StringVal>(bfv->InternalState());
	%}
