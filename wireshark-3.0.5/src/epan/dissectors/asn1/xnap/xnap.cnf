# xnap.cnf
# xnap conformation file
# Copyright 2018-2019 Pascal Quantin

#.OPT
PER
ALIGNED
#.END

#.MAKE_ENUM
GlobalNG-RANNode-ID TYPE_PREFIX
ProtocolIE-ID
ProcedureCode

#.USE_VALS_EXT
CauseRadioNetworkLayer
NRNRB
ProcedureCode
ProtocolIE-ID

#.EXPORTS

#.PDU
XnAP-PDU

#.TYPE_RENAME
ProtocolIE-Field/value     ProtocolIE_Field_value
PrivateIE-Field/value      PrivateIE_Field_value
InitiatingMessage/value    InitiatingMessage_value
SuccessfulOutcome/value    SuccessfulOutcome_value
UnsuccessfulOutcome/value  UnsuccessfulOutcome_value

#.FIELD_RENAME
ProtocolExtensionField/id extension_id
PrivateIE-Field/id private_id
InitiatingMessage/value initiatingMessage_value

ProtocolIE-Field/value protocolIE_Field_value
SuccessfulOutcome/value successfulOutcome_value
PrivateIE-Field/value privateIE_Field_value

#.OMIT_ASSIGNMENT
DataForwardingAccepted
DRBsToBeModified-List-ModRqd-MNterminated
DRBsToBeModified-List-ModRqd-MNterminated-Item
PDUSessionResourceModRqdInfo-MNterminated
Presence
ProtocolIE-FieldPair
ProtocolIE-ContainerList
ProtocolIE-ContainerPair
ProtocolIE-ContainerPairList
ReferenceID
#.END

#.FN_BODY ProtocolIE-ID VAL_PTR = &xnap_data->protocol_ie_id
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
%(DEFAULT_BODY)s
#.FN_FTR ProtocolIE-ID
  if (tree) {
    proto_item_append_text(proto_item_get_parent_nth(actx->created_item, 2), ": %s", val_to_str_ext(xnap_data->protocol_ie_id, &xnap_ProtocolIE_ID_vals_ext, "unknown (%d)"));
  }
#.END

#.FN_PARS ProtocolIE-Field/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_ProtocolIEFieldValue

#.FN_PARS ProtocolExtensionField/extensionValue FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_ProtocolExtensionFieldExtensionValue

#.FN_BODY ProcedureCode VAL_PTR = &xnap_data->procedure_code
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
%(DEFAULT_BODY)s

#.FN_PARS InitiatingMessage/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_InitiatingMessageValue
#.FN_HDR InitiatingMessage/value
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
  xnap_data->message_type = INITIATING_MESSAGE;

#.FN_PARS SuccessfulOutcome/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_SuccessfulOutcomeValue
#.FN_HDR SuccessfulOutcome/value
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
  xnap_data->message_type = SUCCESSFUL_OUTCOME;

#.FN_PARS UnsuccessfulOutcome/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_UnsuccessfulOutcomeValue
#.FN_HDR UnsuccessfulOutcome/value
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
  xnap_data->message_type = UNSUCCESSFUL_OUTCOME;

#.TYPE_ATTR
ProtocolExtensionID TYPE = FT_UINT8 DISPLAY = BASE_DEC|BASE_EXT_STRING STRINGS = &xnap_ProtocolIE_ID_vals_ext
#.END

#.FN_BODY GlobalNG-RANNode-ID VAL_PTR = &value
  gint value;
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);

%(DEFAULT_BODY)s
  if (xnap_data->xnap_conv && xnap_data->procedure_code == id_xnSetup) {
    if (addresses_equal(&actx->pinfo->src, &xnap_data->xnap_conv->addr_a) &&
        actx->pinfo->srcport == xnap_data->xnap_conv->port_a) {
      xnap_data->xnap_conv->ranmode_id_a = (GlobalNG_RANNode_ID_enum)value;
    } else if (addresses_equal(&actx->pinfo->src, &xnap_data->xnap_conv->addr_b) &&
               actx->pinfo->srcport == xnap_data->xnap_conv->port_b) {
      xnap_data->xnap_conv->ranmode_id_b = (GlobalNG_RANNode_ID_enum)value;
    }
  }

#.FN_BODY UEContextInfoHORequest/rrc-Context VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = xnap_get_ranmode_id(&actx->pinfo->dst, actx->pinfo->destport, actx->pinfo);

    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_RRC_Context);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY Target2SourceNG-RANnodeTranspContainer VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum source_ranmode_id = xnap_get_ranmode_id(&actx->pinfo->src, actx->pinfo->srcport, actx->pinfo);

    subtree = proto_item_add_subtree(actx->created_item, ett_nxap_container);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         source_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_HandoverCommand_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                source_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_HandoverCommand_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY MN-to-SN-Container VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = xnap_get_ranmode_id(&actx->pinfo->dst, actx->pinfo->destport, actx->pinfo);

    subtree = proto_item_add_subtree(actx->created_item, ett_nxap_container);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_CG_ConfigInfo_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_SCG_ConfigInfo_r12_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY SN-to-MN-Container VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum source_ranmode_id = xnap_get_ranmode_id(&actx->pinfo->src, actx->pinfo->srcport, actx->pinfo);

    subtree = proto_item_add_subtree(actx->created_item, ett_nxap_container);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         source_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_CG_Config_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                source_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_SCG_Config_r12_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY Configuration-successfully-applied/m-NG-RANNode-to-S-NG-RANNode-Container VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = xnap_get_ranmode_id(&actx->pinfo->dst, actx->pinfo->destport, actx->pinfo);

    subtree = proto_item_add_subtree(actx->created_item, ett_nxap_container);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_RRCReconfigurationComplete_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_RRCConnectionReconfigurationComplete_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY Configuration-rejected-by-M-NG-RANNode/m-NG-RANNode-to-S-NG-RANNode-Container VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = xnap_get_ranmode_id(&actx->pinfo->dst, actx->pinfo->destport, actx->pinfo);

    subtree = proto_item_add_subtree(actx->created_item, ett_nxap_container);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_CG_ConfigInfo_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_SCG_ConfigInfo_r12_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY UEContextInfoRetrUECtxtResp/rrc-Context VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = xnap_get_ranmode_id(&actx->pinfo->dst, actx->pinfo->destport, actx->pinfo);

    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_RRC_Context);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) &&
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) &&
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY PLMN-Identity  VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
  proto_tree *subtree;
%(DEFAULT_BODY)s
  if (!parameter_tvb)
    return offset;

  subtree = proto_item_add_subtree(actx->created_item, ett_xnap_PLMN_Identity);
  dissect_e212_mcc_mnc(parameter_tvb, actx->pinfo, subtree, 0, E212_NONE, FALSE);

#.TYPE_ATTR
TAC TYPE = FT_UINT24 DISPLAY = BASE_DEC_HEX
#.FN_BODY TAC VAL_PTR = &parameter_tvb HF_INDEX = -1
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    actx->created_item = proto_tree_add_item(tree, hf_index, parameter_tvb, 0, 3, ENC_BIG_ENDIAN);
  }

#.FIELD_ATTR
NG-RAN-Cell-Identity/nr ABBREV=NR-Cell-Identity TYPE=FT_UINT40 DISPLAY=BASE_HEX

#.FIELD_ATTR
NR-CGI/nr-CI ABBREV=NR-Cell-Identity TYPE=FT_UINT40 DISPLAY=BASE_HEX

#.FN_BODY NR-Cell-Identity VAL_PTR = &cell_id_tvb HF_INDEX=-1
  tvbuff_t *cell_id_tvb = NULL;
%(DEFAULT_BODY)s
  if (cell_id_tvb) {
    guint64 cell_id = tvb_get_bits64(cell_id_tvb, 0, 36, ENC_BIG_ENDIAN);
    actx->created_item = proto_tree_add_uint64(tree, hf_index, cell_id_tvb, 0, 5, cell_id);
  }

#.FIELD_ATTR
E-UTRA-CGI/e-utra-CI ABBREV=E-UTRA-Cell-Identity TYPE=FT_UINT32 DISPLAY=BASE_HEX

#.FIELD_ATTR
NG-RAN-Cell-Identity/e-utra ABBREV=E-UTRA-Cell-Identity TYPE=FT_UINT32 DISPLAY=BASE_HEX

#.FN_BODY E-UTRA-Cell-Identity VAL_PTR = &cell_id_tvb HF_INDEX=-1
  tvbuff_t *cell_id_tvb = NULL;
%(DEFAULT_BODY)s
  if (cell_id_tvb) {
    guint32 cell_id = tvb_get_bits32(cell_id_tvb, 0, 28, ENC_BIG_ENDIAN);
    actx->created_item = proto_tree_add_uint(tree, hf_index, cell_id_tvb, 0, 4, cell_id);
  }

#.FN_BODY ServedCellInformation-NR/measurementTimingConfiguration VAL_PTR = &param_tvb
  tvbuff_t *param_tvb = NULL;
%(DEFAULT_BODY)s
  if (param_tvb) {
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_measurementTimingConfiguration);
    dissect_nr_rrc_MeasurementTimingConfiguration_PDU(param_tvb, actx->pinfo, subtree, NULL);
  }

#.FN_BODY NeighbourInformation-NR-Item/measurementTimingConfiguration VAL_PTR = &param_tvb
  tvbuff_t *param_tvb = NULL;
%(DEFAULT_BODY)s
  if (param_tvb) {
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_measurementTimingConfiguration);
    dissect_nr_rrc_MeasurementTimingConfiguration_PDU(param_tvb, actx->pinfo, subtree, NULL);
  }

#.TYPE_ATTR
BitRate DISPLAY=BASE_DEC|BASE_UNIT_STRING STRINGS=&units_bit_sec

#.TYPE_ATTR
PacketLossRate DISPLAY = BASE_CUSTOM STRINGS = CF_FUNC(xnap_PacketLossRate_fmt)

#.TYPE_ATTR
PacketDelayBudget DISPLAY = BASE_CUSTOM STRINGS = CF_FUNC(xnap_PacketDelayBudget_fmt)

#.TYPE_ATTR
AveragingWindow DISPLAY=BASE_DEC|BASE_UNIT_STRING STRINGS=&units_milliseconds

#.TYPE_ATTR
MaximumDataBurstVolume DISPLAY=BASE_DEC|BASE_UNIT_STRING STRINGS=&units_byte_bytes

#.FN_BODY TransportLayerAddress VAL_PTR = &parameter_tvb LEN_PTR = &len
  tvbuff_t *parameter_tvb = NULL;
  proto_tree *subtree;
  int len;

%(DEFAULT_BODY)s
  if (!parameter_tvb)
    return offset;

  subtree = proto_item_add_subtree(actx->created_item, ett_xnap_TransportLayerAddress);
  if (len == 32) {
    /* IPv4 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv4, parameter_tvb, 0, 4, ENC_BIG_ENDIAN);
  } else if (len == 128) {
    /* IPv6 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv6, parameter_tvb, 0, 16, ENC_NA);
  } else if (len == 160) {
    /* IPv4 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv4, parameter_tvb, 0, 4, ENC_BIG_ENDIAN);
    /* IPv6 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv6, parameter_tvb, 4, 16, ENC_NA);
  }

#.FN_BODY UESecurityCapabilities/nr-EncyptionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_nr_EncyptionAlgorithms_nea1_128,
      &hf_xnap_T_nr_EncyptionAlgorithms_nea2_128,
      &hf_xnap_T_nr_EncyptionAlgorithms_nea3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_nr_EncyptionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY UESecurityCapabilities/nr-IntegrityProtectionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_nr_IntegrityProtectionAlgorithms_nia1_128,
      &hf_xnap_T_nr_IntegrityProtectionAlgorithms_nia2_128,
      &hf_xnap_T_nr_IntegrityProtectionAlgorithms_nia3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_nr_IntegrityProtectionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY UESecurityCapabilities/e-utra-EncyptionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_e_utra_EncyptionAlgorithms_eea1_128,
      &hf_xnap_T_e_utra_EncyptionAlgorithms_eea2_128,
      &hf_xnap_T_e_utra_EncyptionAlgorithms_eea3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_e_utra_EncyptionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY UESecurityCapabilities/e-utra-IntegrityProtectionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_e_utra_IntegrityProtectionAlgorithms_eia1_128,
      &hf_xnap_T_e_utra_IntegrityProtectionAlgorithms_eia2_128,
      &hf_xnap_T_e_utra_IntegrityProtectionAlgorithms_eia3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_e_utra_IntegrityProtectionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY RAT-RestrictionInformation VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_RAT_RestrictionInformation_e_UTRA,
      &hf_xnap_RAT_RestrictionInformation_nR,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_RAT_RestrictionInformation);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 1, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY TraceActivation/ng-ran-TraceID VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb;
  proto_tree *subtree = NULL;
%(DEFAULT_BODY)s
  if (!parameter_tvb)
    return offset;
  subtree = proto_item_add_subtree(actx->created_item, ett_xnap_ng_ran_TraceID);
  dissect_e212_mcc_mnc(parameter_tvb, actx->pinfo, subtree, 0, E212_NONE, FALSE);
  proto_tree_add_item(subtree, hf_xnap_ng_ran_TraceID_TraceID, parameter_tvb, 3, 3, ENC_BIG_ENDIAN);
  proto_tree_add_item(subtree, hf_xnap_ng_ran_TraceID_TraceRecordingSessionReference, parameter_tvb, 6, 2, ENC_BIG_ENDIAN);

#.FN_BODY TraceActivation/interfaces-to-trace VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_interfaces_to_trace_ng_c,
      &hf_xnap_T_interfaces_to_trace_x_nc,
      &hf_xnap_T_interfaces_to_trace_uu,
      &hf_xnap_T_interfaces_to_trace_f1_c,
      &hf_xnap_T_interfaces_to_trace_e1,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_interfaces_to_trace);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 1, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY LastVisitedNGRANCellInformation VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
  proto_tree *subtree;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_LastVisitedNGRANCellInformation);
    dissect_ngap_LastVisitedNGRANCellInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
  }

#.FN_BODY LastVisitedEUTRANCellInformation VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
  proto_tree *subtree;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_LastVisitedEUTRANCellInformation);
    dissect_s1ap_LastVisitedEUTRANCellInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
  }

#.FN_BODY LastVisitedUTRANCellInformation VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb;
  proto_tree *subtree;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_LastVisitedUTRANCellInformation);
    dissect_ranap_LastVisitedUTRANCell_Item_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
  }

#.FN_BODY LastVisitedGERANCellInformation VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
  proto_tree *subtree;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_LastVisitedGERANCellInformation);
    dissect_s1ap_LastVisitedGERANCellInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
  }

#.TYPE_ATTR
ExpectedUEMovingTrajectoryItem/timeStayedInCell DISPLAY=BASE_DEC|BASE_UNIT_STRING STRINGS=&units_seconds

#.TYPE_ATTR
ExpectedActivityPeriod DISPLAY=BASE_DEC|BASE_UNIT_STRING STRINGS=&units_seconds

#.TYPE_ATTR
ExpectedIdlePeriod DISPLAY=BASE_DEC|BASE_UNIT_STRING STRINGS=&units_seconds

#.END

#.FN_HDR HandoverRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverRequest");
#.FN_HDR HandoverRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverRequestAcknowledge");
#.FN_HDR HandoverPreparationFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverPreparationFailure");
#.FN_HDR SNStatusTransfer
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNStatusTransfer");
#.FN_HDR HandoverCancel
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverCancel");
#.FN_HDR RetrieveUEContextRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RetrieveUEContextRequest");
#.FN_HDR RetrieveUEContextResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RetrieveUEContextResponse");
#.FN_HDR RetrieveUEContextFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RetrieveUEContextFailure");
#.FN_HDR RANPaging
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RANPaging");
#.FN_HDR XnUAddressIndication
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnUAddressIndication");
#.FN_HDR UEContextRelease
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "UEContextRelease");
#.FN_HDR SNodeAdditionRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeAdditionRequest");
#.FN_HDR SNodeAdditionRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeAdditionRequestAcknowledge");
#.FN_HDR SNodeAdditionRequestReject
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeAdditionRequestReject");
#.FN_HDR SNodeReconfigurationComplete
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReconfigurationComplete");
#.FN_HDR SNodeModificationRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequest");
#.FN_HDR SNodeModificationRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequestAcknowledge");
#.FN_HDR SNodeModificationRequestReject
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequestReject");
#.FN_HDR SNodeModificationRequired
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequired");
#.FN_HDR SNodeModificationConfirm
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationConfirm");
#.FN_HDR SNodeModificationRefuse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRefuse");
#.FN_HDR SNodeReleaseRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseRequest");
#.FN_HDR SNodeReleaseRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseRequestAcknowledge");
#.FN_HDR SNodeReleaseReject
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseReject");
#.FN_HDR SNodeReleaseRequired
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseRequired");
#.FN_HDR SNodeReleaseConfirm
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseConfirm");
#.FN_HDR SNodeCounterCheckRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeCounterCheckRequest");
#.FN_HDR SNodeChangeRequired
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeChangeRequired");
#.FN_HDR SNodeChangeConfirm
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeChangeConfirm");
#.FN_HDR SNodeChangeRefuse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeChangeRefuse");
#.FN_HDR RRCTransfer
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RRCTransfer");
#.FN_HDR XnRemovalRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnRemovalRequest");
#.FN_HDR XnRemovalResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnRemovalResponse");
#.FN_HDR XnRemovalFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnRemovalFailure");
#.FN_HDR XnSetupRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnSetupRequest");
#.FN_HDR XnSetupResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnSetupResponse");
#.FN_HDR XnSetupFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnSetupFailure");
#.FN_HDR NGRANNodeConfigurationUpdate
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "NGRANNodeConfigurationUpdate");
#.FN_HDR NGRANNodeConfigurationUpdateAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "NGRANNodeConfigurationUpdateAcknowledge");
#.FN_HDR NGRANNodeConfigurationUpdateFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "NGRANNodeConfigurationUpdateFailure");
#.FN_HDR E-UTRA-NR-CellResourceCoordinationRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "E-UTRA-NR-CellResourceCoordinationRequest");
#.FN_HDR E-UTRA-NR-CellResourceCoordinationResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "E-UTRA-NR-CellResourceCoordinationResponse");
#.FN_HDR CellActivationRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "CellActivationRequest");
#.FN_HDR CellActivationResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "CellActivationResponse");
#.FN_HDR CellActivationFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "CellActivationFailure");
#.FN_HDR ResetRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "ResetRequest");
#.FN_HDR ResetResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "ResetResponse");
#.FN_HDR ErrorIndication
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "ErrorIndication");
#.FN_HDR NotificationControlIndication
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "NotificationControlIndication");
#.FN_HDR ActivityNotification
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "ActivityNotification");
#.FN_HDR PrivateMessage
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "PrivateMessage");

#.ASSIGN_VALUE_TO_TYPE  # XnAP does not have constants assigned to types, they are pure INTEGER
# ProcedureCode
id-handoverPreparation                                  ProcedureCode
id-sNStatusTransfer                                     ProcedureCode
id-handoverCancel                                       ProcedureCode
id-retrieveUEContext                                    ProcedureCode
id-rANPaging                                            ProcedureCode
id-xnUAddressIndication                                 ProcedureCode
id-uEContextRelease                                     ProcedureCode
id-sNGRANnodeAdditionPreparation                        ProcedureCode
id-sNGRANnodeReconfigurationCompletion                  ProcedureCode
id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation ProcedureCode
id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation ProcedureCode
id-mNGRANnodeinitiatedSNGRANnodeRelease                 ProcedureCode
id-sNGRANnodeinitiatedSNGRANnodeRelease                 ProcedureCode
id-sNGRANnodeCounterCheck                               ProcedureCode
id-sNGRANnodeChange                                     ProcedureCode
id-rRCTransfer                                          ProcedureCode
id-xnRemoval                                            ProcedureCode
id-xnSetup                                              ProcedureCode
id-nGRANnodeConfigurationUpdate                         ProcedureCode
id-cellActivation                                       ProcedureCode
id-reset                                                ProcedureCode
id-errorIndication                                      ProcedureCode
id-privateMessage                                       ProcedureCode
id-notificationControl                                  ProcedureCode
id-activityNotification                                 ProcedureCode
id-e-UTRA-NR-CellResourceCoordination                   ProcedureCode


# ProtocolIE-ID
id-ActivatedServedCells                      ProtocolIE-ID
id-ActivationIDforCellActivation             ProtocolIE-ID
id-admittedSplitSRB                          ProtocolIE-ID
id-admittedSplitSRBrelease                   ProtocolIE-ID
id-AMF-Set-Information                       ProtocolIE-ID
id-AssistanceDataForRANPaging                ProtocolIE-ID
id-BearersSubjectToCounterCheck              ProtocolIE-ID
id-Cause                                     ProtocolIE-ID
id-cellAssistanceInfo-NR                     ProtocolIE-ID
id-ConfigurationUpdateInitiatingNodeChoice   ProtocolIE-ID
id-CriticalityDiagnostics                    ProtocolIE-ID
id-XnUAddressInfoperPDUSession-List          ProtocolIE-ID
id-DRBsSubjectToStatusTransfer-List          ProtocolIE-ID
id-ExpectedUEBehaviour                       ProtocolIE-ID
id-GlobalNG-RAN-node-ID                      ProtocolIE-ID
id-GUAMI                                     ProtocolIE-ID
id-indexToRatFrequSelectionPriority          ProtocolIE-ID
id-initiatingNodeType-ResourceCoordRequest   ProtocolIE-ID
id-List-of-served-cells-E-UTRA               ProtocolIE-ID
id-List-of-served-cells-NR                   ProtocolIE-ID
id-LocationReportingInformation              ProtocolIE-ID
id-MAC-I                                     ProtocolIE-ID
id-MaskedIMEISV                              ProtocolIE-ID
id-M-NG-RANnodeUEXnAPID                      ProtocolIE-ID
id-MN-to-SN-Container                        ProtocolIE-ID
id-MobilityRestrictionList                   ProtocolIE-ID
id-new-NG-RAN-Cell-Identity                  ProtocolIE-ID
id-newNG-RANnodeUEXnAPID                     ProtocolIE-ID
id-NRUEReportRRCTransfer                     ProtocolIE-ID
id-oldNG-RANnodeUEXnAPID                     ProtocolIE-ID
id-OldtoNewNG-RANnodeResumeContainer         ProtocolIE-ID
id-PagingDRX                                 ProtocolIE-ID
id-PCellID                                   ProtocolIE-ID
id-PDCPChangeIndication                      ProtocolIE-ID
id-PDUSessionAdmittedAddedAddReqAck          ProtocolIE-ID
id-PDUSessionAdmittedModSNModConfirm         ProtocolIE-ID
id-PDUSessionAdmitted-SNModResponse          ProtocolIE-ID
id-PDUSessionNotAdmittedAddReqAck            ProtocolIE-ID
id-PDUSessionNotAdmitted-SNModResponse       ProtocolIE-ID
id-PDUSessionReleasedList-RelConf            ProtocolIE-ID
id-PDUSessionReleasedSNModConfirm            ProtocolIE-ID
id-PDUSessionResourcesActivityNotifyList     ProtocolIE-ID
id-PDUSessionResourcesAdmitted-List          ProtocolIE-ID
id-PDUSessionResourcesNotAdmitted-List       ProtocolIE-ID
id-PDUSessionResourcesNotifyList             ProtocolIE-ID
id-PDUSession-SNChangeConfirm-List           ProtocolIE-ID
id-PDUSession-SNChangeRequired-List          ProtocolIE-ID
id-PDUSessionToBeAddedAddReq                 ProtocolIE-ID
id-PDUSessionToBeModifiedSNModRequired       ProtocolIE-ID
id-PDUSessionToBeReleasedList-RelRqd         ProtocolIE-ID
id-PDUSessionToBeReleased-RelReq             ProtocolIE-ID
id-PDUSessionToBeReleasedSNModRequired       ProtocolIE-ID
id-RANPagingArea                             ProtocolIE-ID
id-PagingPriority                            ProtocolIE-ID
id-requestedSplitSRB                         ProtocolIE-ID
id-requestedSplitSRBrelease                  ProtocolIE-ID
id-ResetRequestTypeInfo                      ProtocolIE-ID
id-ResetResponseTypeInfo                     ProtocolIE-ID
id-RespondingNodeTypeConfigUpdateAck         ProtocolIE-ID
id-respondingNodeType-ResourceCoordResponse  ProtocolIE-ID
id-ResponseInfo-ReconfCompl                  ProtocolIE-ID
id-RRCConfigIndication                       ProtocolIE-ID
id-RRCResumeCause                            ProtocolIE-ID
id-SCGConfigurationQuery                     ProtocolIE-ID
id-selectedPLMN                              ProtocolIE-ID
id-ServedCellsToActivate                     ProtocolIE-ID
id-servedCellsToUpdate-E-UTRA                ProtocolIE-ID
id-ServedCellsToUpdateInitiatingNodeChoice   ProtocolIE-ID
id-servedCellsToUpdate-NR                    ProtocolIE-ID
id-s-ng-RANnode-SecurityKey                  ProtocolIE-ID
id-S-NG-RANnodeUE-AMBR                       ProtocolIE-ID
id-S-NG-RANnodeUEXnAPID                      ProtocolIE-ID
id-SN-to-MN-Container                        ProtocolIE-ID
id-sourceNG-RANnodeUEXnAPID                  ProtocolIE-ID
id-SplitSRB-RRCTransfer                      ProtocolIE-ID
id-TAISupport-list                           ProtocolIE-ID
id-TimeToWait                                ProtocolIE-ID
id-Target2SourceNG-RANnodeTranspContainer    ProtocolIE-ID
id-targetCellGlobalID                        ProtocolIE-ID
id-targetNG-RANnodeUEXnAPID                  ProtocolIE-ID
id-target-S-NG-RANnodeID                     ProtocolIE-ID
id-TraceActivation                           ProtocolIE-ID
id-UEContextID                               ProtocolIE-ID
id-UEContextInfoHORequest                    ProtocolIE-ID
id-UEContextInfoRetrUECtxtResp               ProtocolIE-ID
id-UEContextInfo-SNModRequest                ProtocolIE-ID
id-UEContextKeptIndicator                    ProtocolIE-ID
id-UEContextRefAtSN-HORequest                ProtocolIE-ID
id-UEHistoryInformation                      ProtocolIE-ID
id-UEIdentityIndexValue                      ProtocolIE-ID
id-UERANPagingIdentity                       ProtocolIE-ID
id-UESecurityCapabilities                    ProtocolIE-ID
id-UserPlaneTrafficActivityReport            ProtocolIE-ID
id-XnRemovalThreshold                        ProtocolIE-ID
id-DesiredActNotificationLevel               ProtocolIE-ID
id-AvailableDRBIDs                           ProtocolIE-ID
id-AdditionalDRBIDs                          ProtocolIE-ID
id-SpareDRBIDs                               ProtocolIE-ID
id-RequiredNumberOfDRBIDs                    ProtocolIE-ID
id-TNLA-To-Add-List                          ProtocolIE-ID
id-TNLA-To-Update-List                       ProtocolIE-ID
id-TNLA-To-Remove-List                       ProtocolIE-ID
id-TNLA-Setup-List                           ProtocolIE-ID
id-TNLA-Failed-To-Setup-List                 ProtocolIE-ID
id-PDUSessionToBeReleased-RelReqAck          ProtocolIE-ID
id-S-NG-RANnodeMaxIPDataRate                 ProtocolIE-ID
id-PDUSession-List-withDataForwardingRequest ProtocolIE-ID

#.REGISTER

#XNAP-PROTOCOL-IES
ActivatedServedCells                              N xnap.ies id-ActivatedServedCells
ActivationIDforCellActivation                     N xnap.ies id-ActivationIDforCellActivation
SplitSRBsTypes                                    N xnap.ies id-admittedSplitSRB
SplitSRBsTypes                                    N xnap.ies id-admittedSplitSRBrelease
AMF-Set-Information                               N xnap.ies id-AMF-Set-Information
AssistanceDataForRANPaging                        N xnap.ies id-AssistanceDataForRANPaging
BearersSubjectToCounterCheck-List                 N xnap.ies id-BearersSubjectToCounterCheck
Cause                                             N xnap.ies id-Cause
CellAssistanceInfo-NR                             N xnap.ies id-cellAssistanceInfo-NR
ConfigurationUpdateInitiatingNodeChoice           N xnap.ies id-ConfigurationUpdateInitiatingNodeChoice
CriticalityDiagnostics                            N xnap.ies id-CriticalityDiagnostics
XnUAddressInfoperPDUSession-List                  N xnap.ies id-XnUAddressInfoperPDUSession-List
DRBsSubjectToStatusTransfer-List                  N xnap.ies id-DRBsSubjectToStatusTransfer-List
ExpectedUEBehaviour                               N xnap.ies id-ExpectedUEBehaviour
GlobalNG-RANNode-ID                               N xnap.ies id-GlobalNG-RAN-node-ID
GUAMI                                             N xnap.ies id-GUAMI
RFSP-Index                                        N xnap.ies id-indexToRatFrequSelectionPriority
InitiatingNodeType-ResourceCoordRequest           N xnap.ies id-initiatingNodeType-ResourceCoordRequest
ServedCells-E-UTRA                                N xnap.ies id-List-of-served-cells-E-UTRA
ServedCells-NR                                    N xnap.ies id-List-of-served-cells-NR
LocationReportingInformation                      N xnap.ies id-LocationReportingInformation
MAC-I                                             N xnap.ies id-MAC-I
MaskedIMEISV                                      N xnap.ies id-MaskedIMEISV
NG-RANnodeUEXnAPID                                N xnap.ies id-M-NG-RANnodeUEXnAPID
MN-to-SN-Container                                N xnap.ies id-MN-to-SN-Container
MobilityRestrictionList                           N xnap.ies id-MobilityRestrictionList
NG-RAN-Cell-Identity                              N xnap.ies id-new-NG-RAN-Cell-Identity
NG-RANnodeUEXnAPID                                N xnap.ies id-newNG-RANnodeUEXnAPID
NRUEReportRRCTransfer                             N xnap.ies id-NRUEReportRRCTransfer
NG-RANnodeUEXnAPID                                N xnap.ies id-oldNG-RANnodeUEXnAPID
OldtoNewNG-RANnodeResumeContainer                 N xnap.ies id-OldtoNewNG-RANnodeResumeContainer
PagingDRX                                         N xnap.ies id-PagingDRX
GlobalNG-RANCell-ID                               N xnap.ies id-PCellID
PDCPChangeIndication                              N xnap.ies id-PDCPChangeIndication
PDUSessionAdmittedAddedAddReqAck                  N xnap.ies id-PDUSessionAdmittedAddedAddReqAck
PDUSessionAdmittedModSNModConfirm                 N xnap.ies id-PDUSessionAdmittedModSNModConfirm
PDUSessionAdmitted-SNModResponse                  N xnap.ies id-PDUSessionAdmitted-SNModResponse
PDUSessionNotAdmittedAddReqAck                    N xnap.ies id-PDUSessionNotAdmittedAddReqAck
PDUSessionNotAdmitted-SNModResponse               N xnap.ies id-PDUSessionNotAdmitted-SNModResponse
PDUSessionReleasedList-RelConf                    N xnap.ies id-PDUSessionReleasedList-RelConf
PDUSessionReleasedSNModConfirm                    N xnap.ies id-PDUSessionReleasedSNModConfirm
PDUSessionResourcesActivityNotifyList             N xnap.ies id-PDUSessionResourcesActivityNotifyList
PDUSessionResourcesAdmitted-List                  N xnap.ies id-PDUSessionResourcesAdmitted-List
PDUSessionResourcesNotAdmitted-List               N xnap.ies id-PDUSessionResourcesNotAdmitted-List
PDUSessionResourcesNotifyList                     N xnap.ies id-PDUSessionResourcesNotifyList
PDUSession-SNChangeConfirm-List                   N xnap.ies id-PDUSession-SNChangeConfirm-List
PDUSession-SNChangeRequired-List                  N xnap.ies id-PDUSession-SNChangeRequired-List
PDUSessionToBeAddedAddReq                         N xnap.ies id-PDUSessionToBeAddedAddReq
PDUSessionToBeModifiedSNModRequired               N xnap.ies id-PDUSessionToBeModifiedSNModRequired
PDUSessionToBeReleasedList-RelRqd                 N xnap.ies id-PDUSessionToBeReleasedList-RelRqd
PDUSession-List-withCause                         N xnap.ies id-PDUSessionToBeReleased-RelReq
PDUSessionToBeReleasedSNModRequired               N xnap.ies id-PDUSessionToBeReleasedSNModRequired
RANPagingArea                                     N xnap.ies id-RANPagingArea
PagingPriority                                    N xnap.ies id-PagingPriority
SplitSRBsTypes                                    N xnap.ies id-requestedSplitSRB
SplitSRBsTypes                                    N xnap.ies id-requestedSplitSRBrelease
ResetRequestTypeInfo                              N xnap.ies id-ResetRequestTypeInfo
ResetResponseTypeInfo                             N xnap.ies id-ResetResponseTypeInfo
RespondingNodeTypeConfigUpdateAck                 N xnap.ies id-RespondingNodeTypeConfigUpdateAck
RespondingNodeType-ResourceCoordResponse          N xnap.ies id-respondingNodeType-ResourceCoordResponse
ResponseInfo-ReconfCompl                          N xnap.ies id-ResponseInfo-ReconfCompl
RRCConfigIndication                               N xnap.ies id-RRCConfigIndication
RRCResumeCause                                    N xnap.ies id-RRCResumeCause
SCGConfigurationQuery                             N xnap.ies id-SCGConfigurationQuery
PLMN-Identity                                     N xnap.ies id-selectedPLMN
ServedCellsToActivate                             N xnap.ies id-ServedCellsToActivate
ServedCellsToUpdate-E-UTRA                        N xnap.ies id-servedCellsToUpdate-E-UTRA
#id-ServedCellsToUpdateInitiatingNodeChoice
ServedCellsToUpdate-NR                            N xnap.ies id-servedCellsToUpdate-NR
S-NG-RANnode-SecurityKey                          N xnap.ies id-s-ng-RANnode-SecurityKey
UEAggregateMaximumBitRate                         N xnap.ies id-S-NG-RANnodeUE-AMBR
NG-RANnodeUEXnAPID                                N xnap.ies id-S-NG-RANnodeUEXnAPID
SN-to-MN-Container                                N xnap.ies id-SN-to-MN-Container
NG-RANnodeUEXnAPID                                N xnap.ies id-sourceNG-RANnodeUEXnAPID
SplitSRB-RRCTransfer                              N xnap.ies id-SplitSRB-RRCTransfer
TAISupport-List                                   N xnap.ies id-TAISupport-list
TimeToWait                                        N xnap.ies id-TimeToWait
Target2SourceNG-RANnodeTranspContainer            N xnap.ies id-Target2SourceNG-RANnodeTranspContainer
Target-CGI                                        N xnap.ies id-targetCellGlobalID
NG-RANnodeUEXnAPID                                N xnap.ies id-targetNG-RANnodeUEXnAPID
GlobalNG-RANNode-ID                               N xnap.ies id-target-S-NG-RANnodeID
TraceActivation                                   N xnap.ies id-TraceActivation
UEContextID                                       N xnap.ies id-UEContextID
UEContextInfoHORequest                            N xnap.ies id-UEContextInfoHORequest
UEContextInfoRetrUECtxtResp                       N xnap.ies id-UEContextInfoRetrUECtxtResp
UEContextInfo-SNModRequest                        N xnap.ies id-UEContextInfo-SNModRequest
UEContextKeptIndicator                            N xnap.ies id-UEContextKeptIndicator
UEContextRefAtSN-HORequest                        N xnap.ies id-UEContextRefAtSN-HORequest
UEHistoryInformation                              N xnap.ies id-UEHistoryInformation
UEIdentityIndexValue                              N xnap.ies id-UEIdentityIndexValue
UERANPagingIdentity                               N xnap.ies id-UERANPagingIdentity
UESecurityCapabilities                            N xnap.ies id-UESecurityCapabilities
UserPlaneTrafficActivityReport                    N xnap.ies id-UserPlaneTrafficActivityReport
XnBenefitValue                                    N xnap.ies id-XnRemovalThreshold
DesiredActNotificationLevel                       N xnap.ies id-DesiredActNotificationLevel
DRB-List                                          N xnap.ies id-AvailableDRBIDs
DRB-List                                          N xnap.ies id-AdditionalDRBIDs
DRB-List                                          N xnap.ies id-SpareDRBIDs
DRB-Number                                        N xnap.ies id-RequiredNumberOfDRBIDs
TNLA-To-Add-List                                  N xnap.ies id-TNLA-To-Add-List
TNLA-To-Update-List                               N xnap.ies id-TNLA-To-Update-List
TNLA-To-Remove-List                               N xnap.ies id-TNLA-To-Remove-List
TNLA-Setup-List                                   N xnap.ies id-TNLA-Setup-List
TNLA-Failed-To-Setup-List                         N xnap.ies id-TNLA-Failed-To-Setup-List
PDUSessionToBeReleasedList-RelReqAck              N xnap.ies id-PDUSessionToBeReleased-RelReqAck
BitRate                                           N xnap.ies id-S-NG-RANnodeMaxIPDataRate
PDUSession-List-withDataForwardingRequest         N xnap.ies id-PDUSession-List-withDataForwardingRequest

#XNAP-PROTOCOL-EXTENSION

#XNAP-ELEMENTARY-PROCEDURE
HandoverRequest                            N xnap.proc.imsg id-handoverPreparation
HandoverRequestAcknowledge                 N xnap.proc.sout id-handoverPreparation
HandoverPreparationFailure                 N xnap.proc.uout id-handoverPreparation

SNStatusTransfer                           N xnap.proc.imsg id-sNStatusTransfer

HandoverCancel                             N xnap.proc.imsg id-handoverCancel

RetrieveUEContextRequest                   N xnap.proc.imsg id-retrieveUEContext
RetrieveUEContextResponse                  N xnap.proc.sout id-retrieveUEContext
RetrieveUEContextFailure                   N xnap.proc.uout id-retrieveUEContext

RANPaging                                  N xnap.proc.imsg id-rANPaging

XnUAddressIndication                       N xnap.proc.imsg id-xnUAddressIndication

UEContextRelease                           N xnap.proc.imsg id-uEContextRelease

SNodeAdditionRequest                       N xnap.proc.imsg id-sNGRANnodeAdditionPreparation
SNodeAdditionRequestAcknowledge            N xnap.proc.sout id-sNGRANnodeAdditionPreparation
SNodeAdditionRequestReject                 N xnap.proc.uout id-sNGRANnodeAdditionPreparation

SNodeReconfigurationComplete               N xnap.proc.imsg id-sNGRANnodeReconfigurationCompletion

SNodeModificationRequest                   N xnap.proc.imsg id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationRequestAcknowledge        N xnap.proc.sout id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationRequestReject             N xnap.proc.uout id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation

SNodeModificationRequired                  N xnap.proc.imsg id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationConfirm                   N xnap.proc.sout id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationRefuse                    N xnap.proc.uout id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation

SNodeReleaseRequest                        N xnap.proc.imsg id-mNGRANnodeinitiatedSNGRANnodeRelease
SNodeReleaseRequestAcknowledge             N xnap.proc.sout id-mNGRANnodeinitiatedSNGRANnodeRelease
SNodeReleaseReject                         N xnap.proc.uout id-mNGRANnodeinitiatedSNGRANnodeRelease

SNodeReleaseRequired                       N xnap.proc.imsg id-sNGRANnodeinitiatedSNGRANnodeRelease
SNodeReleaseConfirm                        N xnap.proc.sout id-sNGRANnodeinitiatedSNGRANnodeRelease

SNodeCounterCheckRequest                   N xnap.proc.imsg id-sNGRANnodeCounterCheck

SNodeChangeRequired                        N xnap.proc.imsg id-sNGRANnodeChange
SNodeChangeConfirm                         N xnap.proc.sout id-sNGRANnodeChange
SNodeChangeRefuse                          N xnap.proc.uout id-sNGRANnodeChange

RRCTransfer                                N xnap.proc.imsg id-rRCTransfer

XnRemovalRequest                           N xnap.proc.imsg id-xnRemoval
XnRemovalResponse                          N xnap.proc.sout id-xnRemoval
XnRemovalFailure                           N xnap.proc.uout id-xnRemoval

XnSetupRequest                             N xnap.proc.imsg id-xnSetup
XnSetupResponse                            N xnap.proc.sout id-xnSetup
XnSetupFailure                             N xnap.proc.uout id-xnSetup

NGRANNodeConfigurationUpdate               N xnap.proc.imsg id-nGRANnodeConfigurationUpdate
NGRANNodeConfigurationUpdateAcknowledge    N xnap.proc.sout id-nGRANnodeConfigurationUpdate
NGRANNodeConfigurationUpdateFailure        N xnap.proc.uout id-nGRANnodeConfigurationUpdate

E-UTRA-NR-CellResourceCoordinationRequest  N xnap.proc.imsg id-e-UTRA-NR-CellResourceCoordination
E-UTRA-NR-CellResourceCoordinationResponse N xnap.proc.sout id-e-UTRA-NR-CellResourceCoordination

CellActivationRequest                      N xnap.proc.imsg id-cellActivation
CellActivationResponse                     N xnap.proc.sout id-cellActivation
CellActivationFailure                      N xnap.proc.uout id-cellActivation

ResetRequest                               N xnap.proc.imsg id-reset
ResetResponse                              N xnap.proc.sout id-reset

ErrorIndication                            N xnap.proc.imsg id-errorIndication

NotificationControlIndication              N xnap.proc.imsg id-notificationControl

ActivityNotification                       N xnap.proc.imsg id-activityNotification

PrivateMessage                             N xnap.proc.imsg id-privateMessage
#.END
